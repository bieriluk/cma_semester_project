---
title: "Project code"
author: "Lukas Bieri (bieriluk) & Valentin Hett (hettval1)"
date: "14.05.2023"
format: html
editor: source
---



# Improved Transport Mode Detection & Public Transport Punctuality Assessment

## 1. Informationen & Metadaten

### 1.1 Zum Projekt

Fallbeispiel mit Abschlussbericht über die multivariate Analyse am Beispiel der Habitatselektion des Rehs

**Modul:** Research Methods HS22

**Kurs:** Fallstudie MRU Biodiversity and Ecosystems

**Dozierende:** Roland Graf (graf) & Reto Rupf (rupf)

**Unterstützende Lehrpersonen:** Benjamin Sigrist (sigb) & Adrian Hochreutener (hoce)

**Autoren:** Mirjam Scheib (scheimir), Valentin Hett (hettval1), Pascal Luder (luderpas), Lukas Bieri (bieriluk)

**Stand:** 05.01.2023



### 1.2 Ordnerstruktur R-Projekt

Arbeiten erfolgten in einem R-Projekt auf der MS OneDrive über den Account der ZHAW, geteilt mit allen am Projekt mitarbeitenden Personen.

Das Projekt wurde in folgendem Ordner erstellt:
Shared_RProject_ReMe_Team3

Daten welche im R versendet wurden, sind im Unterordner "data" abgelegt.
Resultate, inbesondere Grafiken, wurden im Unterordner "Results" abgelegt.

### 1.3 Verwendete Daten

Verwendete Daten wurden von den Dozierenden und unterstützenden Lehrpersonen beschafft und zur Verfügung gestellt. Für die Auswertung wurden keine eigenen Daten beschafft oder erhoben.

Folgende Daten wurden für die Auswertungen und Modellierungen in der vorliegenden Fallstudie verwendet:

1.  File: Aufgabe3_Homeranges_Rehe_landforst_20221024.csv
    Kurzbeschrieb:
    Stand:
    Metadaten:

2.  File: Aufgabe3_Reh_Waldstruktur_221013.csv
    Kurzbeschrieb:
    Stand:
    Metadaten:

3.  File: Aufgabe4_Datensatz_Habitatnutzung_Modelle_20221031_moodle.csv
    Kurzbeschrieb:
    Stand:
    Metadaten:

4.  File: pk25_wpz.tif
    Kurzbeschrieb:
    Stand:
    Metadaten:

Alle heruntergeladen am 15.11.2022 vom Moodle-Server der ZHAW LSFM im Kurs Research Methods HS22 MSc ENR, Ordner ReMe HS22 MSc ENR/Fallstudie Biodiversity & Ecosystems/N_Daten: https://moodle.zhaw.ch/mod/folder/view.php?id=578940

Ein Grossteil des Codes in R wurde aus den von der Modulleitung auf GitHub zu Verfügung gestellten Übungen zur Fallstudie übernommen und für unsere Zwecke angepasst und ergänzt.

### 1.4 Verwendete Software

**R version 4.2.1 (2022-06-23 ucrt)** -- "Funny-Looking Kid" Copyright (C) 2022 The R Foundation for Statistical Computing Platform: x86_64-w64-mingw32/x64 (64-bit)

**RStudio 2022.07.2+576** "Spotted Wakerobin" Release (e7373ef832b49b2a9b88162cfe7eac5f22c40b34, 2022-09-06) for Windows Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) QtWebEngine/5.12.8 Chrome/69.0.3497.128 Safari/537.36


## 2. Vorbemerkungen & Vorbereitung

Zur Vorbereitung: R-Session neu starten (Restart R) und Konsole berenigen (clear console)

Dann: Funktion die wenn nötig die nötigen Packages installiert und lädt : - lme4 - bbmle - MuMIn - tidyverse - DHARMa - car - MASS - ROCR - sjPlot - ggeffects - sjstats - cowplot - magrittr - gstat - sf - raster - adehabitatHR - maptools - sp - ggspatial - rgeos - rgdal - PerformanceAnalytics - pastecs

```{r}
#| output: false
#| warning: false
ipak <- function(pkg){
  new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
  if (length(new.pkg)) 
    install.packages(new.pkg, repos = "http://cran.us.r-project.org", 
                     dependencies = TRUE)
  sapply(pkg, require, character.only = TRUE)
}

packages <- c("ggplot2", "dplyr", "tidyr", "readr", "zoo", "data.table", "sf", "terra", "tmap", "stats", "randomForest", "lubridate", "traj")

ipak(packages)
```
Prüfen ob die benötigten Packages korrekt geladen wurden.
i.O. --> Weiter zum einlesen der Daten

## 3. Daten(vor)verarbeitung

### 3.1 Daten einlesen & anpassen

**Daten für die Homerange-Berechnung einlesen**
```{r}
posmo <- read_delim("datasets/posmo_2023-01-01T00-00-00_2023-05-13T23-59-59_bieriluk.csv", delim = ",")

```

Check if the import got the Time Zone for the POSIXct colum correct (compare with the first entry in the imported data with the raw data):
```{r}
str(posmo)
Sys.time()
```

Store your data frame as a spatial data frame and transform the coordinate system from WGS84 (i.e. EPSG 4326) to CH1903+ LV95 (EPSG 2056)
```{r}
posmo <- st_as_sf(posmo, coords = c("lon_x","lat_y"), crs = 4326) |>
  st_transform(2056)

head(posmo)
```

Extract the coordinates into separate coloms to use them for euclidean distance calculation:
```{r}
posmo_coordinates <- st_coordinates(posmo)

posmo <- cbind(posmo, posmo_coordinates)
```


### 3.2 For how long were the individual tracked? Are there gaps? Were all individuals tracked concurrently or sequentially?
```{r}
ggplot(posmo, aes(DatetimeUTC)) +
  geom_point()

head(posmo)
tail(posmo)
```




## 3. Getting an overview & EDA

### 3.1 How many individuals were tracked 
```{r}
posmo$user_id |> unique()
```
--> 1 Individuals, because for the moment we are only working with on data set (not the POSMO Pool)

Choose a single day for this step (13.04.2023, because many different visited places that day) and filter your data:
```{r}
posmo_filter <- posmo |>
    filter(as.Date(datetime) == "2023-04-13")
```

```{r}
ggplot(posmo_filter, aes(X,Y, color = datetime)) +
  geom_point() +
  geom_path() +
  coord_equal()

tmap_mode(mode = "view")

tm_shape(posmo_filter) +
  tm_dots()
  tm_basemap("Esri.WorldImagery")
```
X = E, Y = N

### 3.3 What is the temporal sampling interval between the locations?
Calculate timelag to figure out a appropriate temporal window:
```{r}
posmo_filter <- posmo_filter|>
  mutate(timelag_s = as.numeric(difftime(lead(datetime), datetime)))
```

So what does the timelag between measurement points look like:
```{r}
tail(posmo_filter)
mean(posmo_filter$timelag_s, na.rm = TRUE)
median(posmo_filter$timelag_s, na.rm = TRUE)
min(posmo_filter$timelag_s, na.rm = TRUE)
max(posmo_filter$timelag_s, na.rm = TRUE)

posmo_filter|> 
  ggplot(aes(timelag_s)) +
  geom_histogram(binwidth = 1) +
  lims(x = c(0, 20000)) +
  scale_y_log10() +
  scale_x_log10()

posmo_filter |> 
  ggplot(aes(datetime, timelag_s)) +
  geom_point() + 
  geom_line()

```
Unfortunately the timelag between measurement points is very irregular. Maybe in a later step it would make sense to increase the granularity in the data to 

For this exercise we try to use the data as is and try it with a window of 10 steps and 20 steps forward and backward in the data. This is roughly v = 20s-6min, because the most common timelag is 10s, with most being between 1 and 20s. 


Resampling

Whats is the timelag:


Probieren mit traj:
```{r}

```

